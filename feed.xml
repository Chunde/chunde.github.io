<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://chunde.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://chunde.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-17T17:17:28+00:00</updated><id>https://chunde.github.io/feed.xml</id><title type="html">i‚Ñè‚àÆdÕ©ùõë‚Ä¢üíï</title><subtitle>Chunde&apos;s Personal Pages. </subtitle><entry><title type="html">CRISPR Epigenome Editing</title><link href="https://chunde.github.io/blog/2025/CRISPR-based-Epigenome-Engineering/" rel="alternate" type="text/html" title="CRISPR Epigenome Editing"/><published>2025-08-17T10:16:18+00:00</published><updated>2025-08-17T10:16:18+00:00</updated><id>https://chunde.github.io/blog/2025/CRISPR-based-Epigenome-Engineering</id><content type="html" xml:base="https://chunde.github.io/blog/2025/CRISPR-based-Epigenome-Engineering/"><![CDATA[<h3 id="how-crispr-based-epigenome-engineering-works"><strong>How CRISPR-Based Epigenome Engineering Works</strong></h3> <p>CRISPR-based epigenome engineering leverages the precision of the CRISPR-Cas system to modify gene expression <em>without altering the underlying DNA sequence</em>. Instead of inducing double-strand breaks (DSBs), it targets epigenetic marks‚Äîchemical modifications on DNA or histones that regulate gene activity.</p> <h4 id="key-components--mechanism"><strong>Key Components &amp; Mechanism</strong></h4> <ol> <li><strong>CRISPR-Cas9 Variants (dCas9 or nCas9)</strong> <ul> <li><strong>dCas9 (dead Cas9)</strong>: Catalytically inactive (no DNA cleavage) but retains DNA-binding ability.</li> <li><strong>nCas9 (nickase)</strong>: Cuts only one DNA strand, reducing off-target effects.</li> </ul> </li> <li><strong>Epigenetic Effector Domains</strong><br/> Fused to dCas9 to add/remove epigenetic marks: <ul> <li><strong>DNA Methylation</strong>: <em>DNMT3A</em> (methyltransferase) silences genes by adding methyl groups to CpG islands.</li> <li><strong>DNA Demethylation</strong>: <em>TET1</em> oxidizes 5-methylcytosine to promote gene activation.</li> <li><strong>Histone Modifiers</strong>: <ul> <li><em>p300</em> (acetyltransferase) activates genes via histone acetylation (e.g., H3K27ac).</li> <li><em>LSD1</em> (demethylase) represses genes by removing H3K4me2/me3 marks.</li> </ul> </li> </ul> </li> <li><strong>sgRNA Design</strong><br/> Guides dCas9-effector fusion to specific genomic loci (e.g., promoters/enhancers).</li> </ol> <h4 id="workflow"><strong>Workflow</strong></h4> <ol> <li><strong>Target Selection</strong>: sgRNA directs dCas9-effector to the desired region.</li> <li><strong>Epigenetic Editing</strong>: <ul> <li>For activation: \(\text{dCas9-p300} \rightarrow \text{H3K27ac} \uparrow \rightarrow \text{Transcription} \uparrow\)</li> <li>For repression: \(\text{dCas9-KRAB} \rightarrow \text{H3K9me3} \uparrow \rightarrow \text{Transcription} \downarrow\)</li> </ul> </li> <li><strong>Outcome</strong>: Stable or transient changes in gene expression.</li> </ol> <h4 id="applications"><strong>Applications</strong></h4> <ul> <li><strong>Disease Modeling</strong>: Study roles of epigenetic marks in cancer/neurodegeneration.</li> <li><strong>Therapeutics</strong>: Reactivate tumor suppressor genes or silence oncogenes.</li> <li><strong>Agriculture</strong>: Modulate stress-responsive genes in crops.</li> </ul> <h4 id="advantages-over-traditional-crispr"><strong>Advantages Over Traditional CRISPR</strong></h4> <ul> <li>Reversible edits (no permanent DNA damage).</li> <li>Multiplexing (target multiple loci simultaneously).</li> <li>Reduced off-target effects (no DSBs).</li> </ul> <h4 id="challenges"><strong>Challenges</strong></h4> <ul> <li>Delivery efficiency (viral/non-viral vectors).</li> <li>Durability of epigenetic changes.</li> <li>Ethical concerns (e.g., germline editing).</li> </ul> <p>This approach expands CRISPR‚Äôs utility beyond knockout/knock-in, enabling precise control over gene networks.</p> <hr/> <p><em>Example</em>: Using \(\text{dCas9-TET1}\) to demethylate the <em>FMR1</em> promoter in Fragile X syndrome models.</p>]]></content><author><name></name></author><category term="CRISPR"/><category term="epigenetics"/><category term="gene-regulation"/><category term="genome-editing"/><category term="biotechnology"/><summary type="html"><![CDATA[Mechanism and applications of CRISPR for targeted epigenetic modifications.]]></summary></entry><entry><title type="html">Mitochondrial Transplantation</title><link href="https://chunde.github.io/blog/2025/Mitochondrial-Transplantation-Mechanism/" rel="alternate" type="text/html" title="Mitochondrial Transplantation"/><published>2025-08-15T23:47:23+00:00</published><updated>2025-08-15T23:47:23+00:00</updated><id>https://chunde.github.io/blog/2025/Mitochondrial-Transplantation-Mechanism</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Mitochondrial-Transplantation-Mechanism/"><![CDATA[<h3 id="detailed-explanation-of-mitochondrial-transplantation"><strong>Detailed Explanation of Mitochondrial Transplantation</strong></h3> <p>Mitochondrial transplantation is an emerging therapeutic technique where functional mitochondria are transferred from healthy donor cells to recipient cells with dysfunctional mitochondria. This process aims to restore cellular bioenergetics and mitigate diseases caused by mitochondrial dysfunction (e.g., neurodegenerative disorders, heart disease).</p> <h4 id="key-steps"><strong>Key Steps</strong>:</h4> <ol> <li><strong>Isolation of Mitochondria</strong>: <ul> <li>Healthy mitochondria are extracted from donor cells (e.g., mesenchymal stem cells) via differential centrifugation or microfluidics.</li> <li>Purity is confirmed using markers like <strong>MT-CO1</strong> (mitochondrial cytochrome oxidase).</li> </ul> </li> <li><strong>Delivery Methods</strong>: <ul> <li><strong>Direct Injection</strong>: Mitochondria are injected into target tissues (e.g., myocardium in heart disease).</li> <li><strong>Co-incubation</strong>: Recipient cells are incubated with isolated mitochondria, which are internalized via endocytosis or membrane fusion.</li> <li><strong>Nanocarriers</strong>: Mitochondria are encapsulated in lipid nanoparticles for targeted delivery.</li> </ul> </li> <li><strong>Integration</strong>: <ul> <li>Transplanted mitochondria merge with the host cell‚Äôs mitochondrial network (<strong>fusion</strong>) or operate independently.</li> <li>Energy production (ATP synthesis) is restored via oxidative phosphorylation (\(\Delta \psi_m\) = membrane potential).</li> </ul> </li> <li><strong>Therapeutic Effects</strong>: <ul> <li><strong>Cardioprotection</strong>: Improves ATP supply in ischemic hearts.</li> <li><strong>Neuroprotection</strong>: Reduces oxidative stress in neurons.</li> </ul> </li> </ol> <h4 id="challenges"><strong>Challenges</strong>:</h4> <ul> <li><strong>Immune rejection</strong>: Donor mitochondria may trigger immune responses.</li> <li><strong>Quality control</strong>: Ensuring mitochondrial viability pre-transplantation.</li> </ul> <h4 id="applications"><strong>Applications</strong>:</h4> <ul> <li>Treating <strong>mitochondrial DNA disorders</strong> (e.g., Leigh syndrome).</li> <li>Enhancing <strong>organ transplant outcomes</strong>.</li> </ul> <p><strong>Formula Example</strong>: The ATP yield from transplanted mitochondria can be modeled as:<br/> \(\text{ATP} = n \times \text{PDH activity} \times \Delta \psi_m\)<br/> where \(n\) = number of functional mitochondria.</p> <p>This technique holds promise but requires further clinical validation.</p>]]></content><author><name></name></author><category term="cell-therapy"/><category term="mitochondria"/><category term="regenerative-medicine"/><category term="bioengineering"/><summary type="html"><![CDATA[Process of transferring healthy mitochondria to repair damaged cells.]]></summary></entry><entry><title type="html">x86 Assembly Interrupt Vector Check</title><link href="https://chunde.github.io/blog/2025/x86-Assembly-Code-Analysis-for-Interrupt-Vector-Tampering-Detection/" rel="alternate" type="text/html" title="x86 Assembly Interrupt Vector Check"/><published>2025-08-06T20:30:44+00:00</published><updated>2025-08-06T20:30:44+00:00</updated><id>https://chunde.github.io/blog/2025/x86-Assembly-Code-Analysis-for-Interrupt-Vector-Tampering-Detection</id><content type="html" xml:base="https://chunde.github.io/blog/2025/x86-Assembly-Code-Analysis-for-Interrupt-Vector-Tampering-Detection/"><![CDATA[<p>This x86 assembly code snippet checks for potential tampering with interrupt vectors (specifically INT 1 and INT 3), which is a common technique used by debuggers like SoftICE. Here‚Äôs the detailed breakdown:</p> <ol> <li><strong>Loading IDT Address</strong>: <pre><code class="language-assembly">mov eax, dword ptr [pIDT+2]  ; Load upper part of IDT base address
</code></pre> <ul> <li><code class="language-plaintext highlighter-rouge">pIDT</code> likely points to a structure containing the IDT (Interrupt Descriptor Table) address</li> <li><code class="language-plaintext highlighter-rouge">+2</code> offset suggests retrieving the high-order 32 bits of a 48-bit IDT base address</li> </ul> </li> <li><strong>Calculate INT 1 Vector Address</strong>: <pre><code class="language-assembly">add eax, 8                  ; Each interrupt descriptor is 8 bytes
</code></pre> <ul> <li>INT 1 (debug exception) is the second entry (after INT 0)</li> <li>Adding 8 bytes (1 entry) to reach INT 1‚Äôs descriptor</li> </ul> </li> <li><strong>Store INT 1 Handler</strong>: <pre><code class="language-assembly">mov ebx, [eax]              ; Get first 4 bytes of INT 1 descriptor
</code></pre> <ul> <li>Stores the low 32 bits of INT 1‚Äôs handler address (offset + selector)</li> </ul> </li> <li><strong>Calculate INT 3 Vector Address</strong>: <pre><code class="language-assembly">add eax, 16                 ; Skip INT 2 to reach INT 3 (8*2=16 bytes)
</code></pre> <ul> <li>INT 3 (breakpoint) is the fourth entry</li> <li>Adding 16 more bytes (2 entries) to reach INT 3‚Äôs descriptor</li> </ul> </li> <li><strong>Store INT 3 Handler</strong>: <pre><code class="language-assembly">mov eax, [eax]              ; Get first 4 bytes of INT 3 descriptor
</code></pre> </li> <li><strong>Extract Offsets</strong>: <pre><code class="language-assembly">and eax, 0FFFFh             ; Mask to get handler offset (low 16 bits)
and ebx, 0FFFFh             ; Same for INT 1
</code></pre> <ul> <li>Isolates the offset parts of both interrupt handlers</li> </ul> </li> <li><strong>Calculate Distance</strong>: <pre><code class="language-assembly">sub eax, ebx                ; Find displacement between handlers
cmp eax, 10h                ; Compare with expected value (16 bytes)
jne HackedVector            ; Jump if not equal
</code></pre> <ul> <li>Checks if the distance between INT 1 and INT 3 handlers is exactly 16 bytes</li> <li>If not, assumes tampering (e.g., by SoftICE debugger)</li> </ul> </li> </ol> <p><strong>Key Points</strong>:</p> <ul> <li>The code assumes legitimate interrupt handlers will have a specific memory layout</li> <li>Debuggers often modify these vectors to insert their own handlers</li> <li>The check \(\text{INT3\_offset} - \text{INT1\_offset} = 16\) is used as a fingerprint</li> <li>This is anti-debugging technique commonly seen in copy protection schemes</li> </ul>]]></content><author><name></name></author><category term="assembly"/><category term="x86"/><category term="reverse-engineering"/><category term="interrupts"/><summary type="html"><![CDATA[Analysis of assembly code detecting interrupt vector tampering]]></summary></entry><entry><title type="html">Dual Comb Spectroscopy</title><link href="https://chunde.github.io/blog/2025/Dual-Comb-Spectroscopy/" rel="alternate" type="text/html" title="Dual Comb Spectroscopy"/><published>2025-07-31T23:44:16+00:00</published><updated>2025-07-31T23:44:16+00:00</updated><id>https://chunde.github.io/blog/2025/#-Dual-Comb-Spectroscopy</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Dual-Comb-Spectroscopy/"><![CDATA[<h2 id="what-is-dual-comb-spectroscopy"><strong>What is Dual Comb Spectroscopy?</strong></h2> <p>Dual comb spectroscopy (DCS) is an advanced spectroscopic technique that uses two optical frequency combs with slightly different repetition rates to achieve ultra-high-resolution and broadband spectral measurements.</p> <h3 id="key-principles"><strong>Key Principles:</strong></h3> <ol> <li><strong>Frequency Combs</strong>: <ul> <li>A frequency comb is a laser source that emits a spectrum of equally spaced, sharp spectral lines.</li> <li>The frequency of each line is given by:<br/> \(f_n = f_0 + n \cdot f_{rep}\)<br/> where: <ul> <li>\(f_0\) = carrier-envelope offset frequency</li> <li>\(n\) = integer (mode number)</li> <li>\(f_{rep}\) = repetition rate</li> </ul> </li> </ul> </li> <li><strong>Dual Comb Concept</strong>: <ul> <li>Two combs with slightly different repetition rates (\(f_{rep,1}\) and \(f_{rep,2}\)) interfere, generating a <strong>heterodyne beat signal</strong> in the radio-frequency (RF) domain.</li> <li>The resulting signal allows for rapid, high-resolution spectral acquisition.</li> </ul> </li> <li><strong>Advantages Over Traditional Spectroscopy</strong>: <ul> <li><strong>High speed</strong>: Captures spectra in microseconds instead of seconds.</li> <li><strong>Broad bandwidth</strong>: Simultaneously measures multiple spectral regions.</li> <li><strong>High resolution</strong>: Resolves fine spectral features.</li> </ul> </li> </ol> <h2 id="applications-of-dual-comb-spectroscopy"><strong>Applications of Dual Comb Spectroscopy</strong></h2> <ol> <li><strong>Gas Sensing &amp; Environmental Monitoring</strong> <ul> <li>Detects trace gases (e.g., methane, CO‚ÇÇ) with high sensitivity.</li> <li>Used in atmospheric studies and industrial leak detection.</li> </ul> </li> <li><strong>Biomedical &amp; Chemical Analysis</strong> <ul> <li>Non-invasive breath analysis for disease detection (e.g., diabetes, cancer).</li> <li>Real-time monitoring of chemical reactions.</li> </ul> </li> <li><strong>Precision Metrology</strong> <ul> <li>Atomic &amp; molecular spectroscopy for fundamental physics research.</li> <li>Optical clock comparisons.</li> </ul> </li> <li><strong>Industrial Process Control</strong> <ul> <li>Monitoring combustion processes in engines.</li> <li>Semiconductor manufacturing quality control.</li> </ul> </li> </ol> <h2 id="specific-example-methane-leak-detection-in-oil--gas-industry"><strong>Specific Example: Methane Leak Detection in Oil &amp; Gas Industry</strong></h2> <h3 id="setup"><strong>Setup:</strong></h3> <ul> <li>Two mode-locked lasers generate frequency combs with repetition rates differing by a few kHz.</li> <li>One comb passes through a gas sample (e.g., near an oil pipeline), while the other serves as a reference.</li> <li>The interference signal is detected by a fast photodetector and analyzed via Fourier transform.</li> </ul> <h3 id="result"><strong>Result:</strong></h3> <ul> <li>Detects methane concentrations as low as <strong>parts-per-billion (ppb)</strong> in real time.</li> <li>Enables rapid identification of leaks, improving safety and reducing emissions.</li> </ul> <p>Dual comb spectroscopy is revolutionizing spectroscopy by combining speed, precision, and broad spectral coverage‚Äîmaking it invaluable in research and industry.</p>]]></content><author><name></name></author><category term="Spectroscopy"/><category term="Lasers"/><category term="Metrology"/><category term="Chemistry"/><category term="Physics"/><summary type="html"><![CDATA[Explanation of dual comb spectroscopy and its applications]]></summary></entry><entry><title type="html">Delayed Variable Expansion</title><link href="https://chunde.github.io/blog/2025/Delayed-Variable-Expansion-in-Windows-Batch-Scripts/" rel="alternate" type="text/html" title="Delayed Variable Expansion"/><published>2025-07-31T23:29:44+00:00</published><updated>2025-07-31T23:29:44+00:00</updated><id>https://chunde.github.io/blog/2025/Delayed-Variable-Expansion-in-Windows-Batch-Scripts</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Delayed-Variable-Expansion-in-Windows-Batch-Scripts/"><![CDATA[<p>Delayed variable expansion is a feature in Windows batch scripting that allows you to access the current value of a variable at execution time rather than at parse time. This is particularly useful when dealing with variables inside blocks of code (like <code class="language-plaintext highlighter-rouge">if</code> statements or <code class="language-plaintext highlighter-rouge">for</code> loops).</p> <h3 id="key-points">Key Points:</h3> <ol> <li><strong>Syntax</strong>: Uses exclamation marks <code class="language-plaintext highlighter-rouge">!var!</code> instead of percent signs <code class="language-plaintext highlighter-rouge">%var%</code></li> <li><strong>Activation</strong>: Requires <code class="language-plaintext highlighter-rouge">SETLOCAL EnableDelayedExpansion</code> at the beginning of your script</li> <li><strong>When Needed</strong>: Essential when modifying and reading variables within the same block</li> </ol> <h3 id="example-without-delayed-expansion">Example Without Delayed Expansion:</h3> <div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo <span class="na">off</span>
<span class="kd">set</span> <span class="kd">var</span><span class="o">=</span><span class="kd">original</span>
<span class="k">if</span> <span class="m">1</span><span class="o">==</span><span class="m">1</span> <span class="o">(</span>
    <span class="kd">set</span> <span class="kd">var</span><span class="o">=</span><span class="kd">new</span>
    <span class="nb">echo</span> <span class="nv">%var%</span>  :: <span class="kd">Will</span> <span class="kd">still</span> <span class="kd">show</span> <span class="s2">"original"</span>
<span class="o">)</span>
</code></pre></div></div> <h3 id="example-with-delayed-expansion">Example With Delayed Expansion:</h3> <div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo <span class="na">off</span>
<span class="kd">SETLOCAL</span> <span class="kd">EnableDelayedExpansion</span>
<span class="kd">set</span> <span class="kd">var</span><span class="o">=</span><span class="kd">original</span>
<span class="k">if</span> <span class="m">1</span><span class="o">==</span><span class="m">1</span> <span class="o">(</span>
    <span class="kd">set</span> <span class="kd">var</span><span class="o">=</span><span class="kd">new</span>
    <span class="nb">echo</span> <span class="nv">!var!</span>  :: <span class="kd">Correctly</span> <span class="kd">shows</span> <span class="s2">"new"</span>
<span class="o">)</span>
</code></pre></div></div> <h3 id="mathematical-operations">Mathematical Operations:</h3> <p>When performing calculations in loops, delayed expansion is often necessary:</p> <div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">SETLOCAL</span> <span class="kd">EnableDelayedExpansion</span>
<span class="kd">set</span> <span class="na">/a </span><span class="kd">count</span><span class="o">=</span><span class="m">0</span>
<span class="k">for</span> <span class="na">/l </span><span class="vm">%%i</span> <span class="k">in</span> <span class="o">(</span><span class="m">1</span><span class="o">,</span><span class="m">1</span><span class="o">,</span><span class="m">5</span><span class="o">)</span> <span class="k">do</span> <span class="o">(</span>
    <span class="kd">set</span> <span class="na">/a </span><span class="kd">count</span><span class="o">+=</span><span class="m">1</span>
    <span class="nb">echo</span> <span class="kd">Iteration</span> <span class="nv">!count!</span>
<span class="o">)</span>
</code></pre></div></div> <p>The main difference can be summarized with the equation: \(\text{Regular Expansion} \rightarrow \%var\% = \text{Value at parse time}\) \(\text{Delayed Expansion} \rightarrow !var! = \text{Value at execution time}\)</p> <p>This feature is crucial for writing robust batch scripts that need to handle dynamic variable values within code blocks.</p>]]></content><author><name></name></author><category term="Windows"/><category term="BatchScript"/><category term="CMD"/><category term="Variables"/><summary type="html"><![CDATA[Explanation of delayed variable expansion in Windows batch scripting]]></summary></entry><entry><title type="html">FTIR Spectroscopy</title><link href="https://chunde.github.io/blog/2025/Fourier-Transform-Infrared-(FTIR)-Spectroscopy/" rel="alternate" type="text/html" title="FTIR Spectroscopy"/><published>2025-07-29T23:48:24+00:00</published><updated>2025-07-29T23:48:24+00:00</updated><id>https://chunde.github.io/blog/2025/#-Fourier-Transform-Infrared-(FTIR)-Spectroscopy</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Fourier-Transform-Infrared-(FTIR)-Spectroscopy/"><![CDATA[<h2 id="1-introduction-to-ftir-spectroscopy"><strong>1. Introduction to FTIR Spectroscopy</strong></h2> <p>Fourier Transform Infrared (FTIR) spectroscopy is an analytical technique used to identify and characterize chemical compounds by measuring their absorption of infrared (IR) radiation. It provides a molecular fingerprint of the sample, allowing for qualitative and quantitative analysis.</p> <h3 id="key-principles"><strong>Key Principles</strong></h3> <ul> <li><strong>Infrared Absorption</strong>: Molecules absorb IR light at specific frequencies corresponding to their vibrational modes (e.g., stretching, bending).</li> <li><strong>Interferometry</strong>: Instead of a dispersive element (like in traditional IR spectroscopy), FTIR uses an interferometer to modulate IR light, producing an interferogram.</li> <li><strong>Fourier Transformation</strong>: The interferogram is converted into a spectrum (absorbance vs. wavenumber, \(cm^{-1}\)) using a mathematical Fourier transform.</li> </ul> <h2 id="2-step-by-step-practical-example"><strong>2. Step-by-Step Practical Example</strong></h2> <h3 id="step-1-sample-preparation"><strong>Step 1: Sample Preparation</strong></h3> <ul> <li><strong>Solid Samples</strong>: <ul> <li><strong>KBr Pellet Method</strong>: Mix ~1 mg of sample with 100 mg KBr, press into a transparent pellet.</li> <li><strong>ATR (Attenuated Total Reflectance)</strong>: Place solid directly on ATR crystal (no preparation needed).</li> </ul> </li> <li><strong>Liquid Samples</strong>: <ul> <li>Apply a thin film between two NaCl or KBr plates.</li> <li>For volatile liquids, use a sealed liquid cell.</li> </ul> </li> <li><strong>Gas Samples</strong>: Use a gas cell with IR-transparent windows.</li> </ul> <h3 id="step-2-instrument-setup"><strong>Step 2: Instrument Setup</strong></h3> <ol> <li><strong>Turn on the FTIR spectrometer</strong> and allow it to warm up (~15-30 min).</li> <li><strong>Background Scan</strong>: Run a scan without the sample to account for atmospheric CO‚ÇÇ and H‚ÇÇO interference.</li> <li><strong>Load the sample</strong> into the sample compartment (e.g., place KBr pellet in holder or ATR crystal).</li> </ol> <h3 id="step-3-data-acquisition"><strong>Step 3: Data Acquisition</strong></h3> <ol> <li><strong>Select scan parameters</strong>: <ul> <li>Wavenumber range: Typically <strong>4000‚Äì400 cm‚Åª¬π</strong></li> <li>Resolution: <strong>4 cm‚Åª¬π</strong> (higher resolution for fine details)</li> <li>Number of scans: <strong>16‚Äì64</strong> (averaging improves signal-to-noise ratio)</li> </ul> </li> <li><strong>Run the scan</strong>: The interferometer modulates IR light, and the detector records the interferogram.</li> <li><strong>Fourier Transform</strong>: Software converts the interferogram into a spectrum.</li> </ol> <h3 id="step-4-data-analysis"><strong>Step 4: Data Analysis</strong></h3> <ul> <li><strong>Peak Identification</strong>: Compare observed peaks to reference spectra (e.g., O-H stretch ~3300 cm‚Åª¬π, C=O stretch ~1700 cm‚Åª¬π).</li> <li><strong>Quantitative Analysis</strong>: Use Beer-Lambert law (\(A = \epsilon \cdot c \cdot l\)) for concentration determination.</li> </ul> <h3 id="step-5-post-measurement"><strong>Step 5: Post-Measurement</strong></h3> <ul> <li>Clean the sample holder (e.g., wipe ATR crystal with ethanol).</li> <li>Store data and export spectra for further processing.</li> </ul> <h2 id="3-example-application"><strong>3. Example Application</strong></h2> <p><strong>Identifying an Unknown Polymer</strong></p> <ol> <li>Obtain a spectrum of the polymer (e.g., polyethylene).</li> <li>Observe key peaks: <ul> <li><strong>C-H stretch</strong>: ~2900 cm‚Åª¬π</li> <li><strong>C-H bending</strong>: ~1460 cm‚Åª¬π</li> </ul> </li> <li>Match with a spectral library to confirm identity.</li> </ol> <h2 id="4-advantages-of-ftir"><strong>4. Advantages of FTIR</strong></h2> <ul> <li>Fast acquisition (seconds per scan).</li> <li>High sensitivity and resolution.</li> <li>Minimal sample preparation (especially with ATR).</li> </ul> <p>By following these steps, FTIR spectroscopy can be effectively used for material characterization in chemistry, pharmaceuticals, and materials science.</p>]]></content><author><name></name></author><category term="spectroscopy"/><category term="FTIR"/><category term="chemistry"/><category term="analytical-techniques"/><summary type="html"><![CDATA[A detailed explanation of FTIR spectroscopy principles and a step-by-step practical guide.]]></summary></entry><entry><title type="html">Kapitza-Dirac Scattering</title><link href="https://chunde.github.io/blog/2025/Kapitza-Dirac-Scattering/" rel="alternate" type="text/html" title="Kapitza-Dirac Scattering"/><published>2025-07-22T23:08:44+00:00</published><updated>2025-07-22T23:08:44+00:00</updated><id>https://chunde.github.io/blog/2025/Kapitza-Dirac-Scattering</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Kapitza-Dirac-Scattering/"><![CDATA[<h3 id="definition"><strong>Definition</strong></h3> <p><em>Kapitza-Dirac scattering</em> refers to the diffraction of matter waves (electrons, atoms, or molecules) by a standing wave of light, analogous to X-ray diffraction in crystals. Predicted by Pyotr Kapitza and Paul Dirac in 1933, it experimentally confirms the wave nature of particles.</p> <h3 id="key-mechanism"><strong>Key Mechanism</strong></h3> <ol> <li> <p><strong>Light-Matter Interaction</strong>:<br/> A standing laser wave creates a periodic potential (optical lattice) via the AC Stark shift. The potential \(V(x)\) for a two-level atom is:<br/> \(V(x) = \frac{\hbar \Omega^2}{4 \Delta} \cos^2(kx)\)<br/> where \(\Omega\) is the Rabi frequency, \(\Delta\) the detuning, and \(k\) the wavevector.</p> </li> <li> <p><strong>Diffraction Condition</strong>:<br/> Particles with de Broglie wavelength \(\lambda_{dB}\) satisfying \(2d\sinŒ∏ = n\lambda_{dB}\) (Bragg condition, \(d = \lambda_L/2\)) undergo constructive interference, splitting into discrete momentum states \(\pm n\hbar k_L\).</p> </li> </ol> <h3 id="experimental-setup"><strong>Experimental Setup</strong></h3> <ol> <li><strong>Requirements</strong>: <ul> <li><strong>Ultracold Atoms/Electrons</strong>: Typically Bose-Einstein condensates (BECs) or laser-cooled atoms (¬µK temperatures).</li> <li><strong>Standing Wave</strong>: Counter-propagating laser beams forming a 1D optical lattice (wavelength \(\lambda_L\)).</li> <li><strong>Pulse Duration</strong>: Short interaction time (¬µs to ms) to avoid spontaneous emission.</li> </ul> </li> <li><strong>Steps</strong>: <ul> <li><strong>Cooling &amp; Trapping</strong>: Prepare atoms in a magneto-optical trap (MOT) and evaporatively cool to BEC.</li> <li><strong>Pulse Application</strong>: Shine the standing wave for a time \(t\) (adjusted to reach \(n\)th-order diffraction).</li> <li><strong>Detection</strong>: Time-of-flight imaging reveals diffracted peaks separated by \(2\hbar k_L\).</li> </ul> </li> </ol> <h3 id="diffraction-regimes"><strong>Diffraction Regimes</strong></h3> <ul> <li><strong>Raman-Nath (Weak Pulses)</strong>: Multiple diffraction orders (thin grating approximation).</li> <li><strong>Bragg (Strong Pulses)</strong>: Selective \(n\)-th order transitions (thick grating).</li> </ul> <h3 id="applications"><strong>Applications</strong></h3> <ul> <li><strong>Atom Interferometry</strong>: Precision measurements of \(g\), \(\hbar/m\).</li> <li><strong>Quantum Simulation</strong>: Emulating solid-state physics in optical lattices.</li> <li><strong>Matter-Wave Optics</strong>: Building atomic beam splitters for quantum computing.</li> </ul> <h3 id="example-experiment"><strong>Example Experiment</strong></h3> <p>A <strong>\(^{87}Rb\) BEC</strong> exposed to a 780 nm standing wave (\(I \sim 10^9\, \text{W/m}^2\), \(\Delta \sim 1\, \text{GHz}\)) for \(t = 10\, \mu\text{s}\) produces \(\pm 2\hbar k_L\) momentum states with 30% efficiency.</p> <h3 id="math-insight"><strong>Math Insight</strong></h3> <p>The diffraction probability \(P_n\) for \(n\)-th order follows Bessel functions (Raman-Nath) or sinusoidal dependence (Bragg):<br/> \(P_n = J_n^2(\Omega t/2) \quad \text{(Raman-Nath)}\)<br/> \(P_{\pm1} = \sin^2(\Omega t/2) \quad \text{(Bragg)}\)</p> <hr/> <p><strong>Note</strong>: Modern experiments use optical tweezers or delta-kick cooling to enhance resolution.</p>]]></content><author><name></name></author><category term="quantum-mechanics"/><category term="atom-optics"/><category term="laser-cooling"/><category term="diffraction"/><category term="matter-waves"/><summary type="html"><![CDATA[Quantum diffraction of particles by a standing light wave, demonstrating wave-particle duality.]]></summary></entry><entry><title type="html">Pendell√∂sung Effect</title><link href="https://chunde.github.io/blog/2025/Pendell%C3%B6sung-Effect-in-Diffraction/" rel="alternate" type="text/html" title="Pendell√∂sung Effect"/><published>2025-07-22T23:08:44+00:00</published><updated>2025-07-22T23:08:44+00:00</updated><id>https://chunde.github.io/blog/2025/Pendell%C3%B6sung-Effect-in-Diffraction</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Pendell%C3%B6sung-Effect-in-Diffraction/"><![CDATA[<h3 id="definition"><strong>Definition</strong></h3> <p>The <em>Pendell√∂sung effect</em> (German for ‚Äúpendulum solution‚Äù) describes the periodic transfer of energy between an incident beam and diffracted beam during dynamical diffraction in perfect crystals. It manifests as oscillations in diffracted intensity with varying crystal thickness or orientation.</p> <h3 id="key-mechanism"><strong>Key Mechanism</strong></h3> <ol> <li> <p><strong>Two-Wave Coupling</strong>:<br/> When X-rays/neutrons satisfy Bragg‚Äôs condition (\(2d\sinŒ∏=nŒª\)), the incident wave (\(œà_0\)) and diffracted wave (\(œà_h\)) become coupled via the crystal‚Äôs periodic potential.</p> </li> <li> <p><strong>Interference Pattern</strong>:<br/> The waves form a standing wave pattern whose nodes/antinodes periodically shift between atomic planes, causing energy exchange. The <em>Pendell√∂sung distance</em> (\(Œõ\)) is the characteristic thickness for complete energy transfer:<br/> \(Œõ = \frac{œÄV_c \cosŒ∏}{Œª |F_h|}\)<br/> where \(V_c\) is unit cell volume, \(F_h\) is structure factor.</p> </li> </ol> <h3 id="observations"><strong>Observations</strong></h3> <ul> <li><strong>Thickness Fringes</strong>: In wedge-shaped crystals, intensity oscillates with thickness (e.g., silicon wafers).</li> <li><strong>Rocking Curves</strong>: For monochromatic beams, oscillations appear during angular scans near Bragg angle.</li> </ul> <h3 id="applications"><strong>Applications</strong></h3> <ul> <li>Precision measurement of structure factors (\(F_h\)).</li> <li>Phase contrast imaging in neutron interferometry.</li> <li>Testing crystal perfection in semiconductor materials.</li> </ul> <h3 id="quantum-analogue"><strong>Quantum Analogue</strong></h3> <p>Analogous to Rabi oscillations in two-level quantum systems, where the diffraction potential acts like a coupling field.</p>]]></content><author><name></name></author><category term="X-ray-diffraction"/><category term="neutron-diffraction"/><category term="crystallography"/><category term="quantum-interference"/><summary type="html"><![CDATA[Quantum interference phenomenon in crystal diffraction causing periodic energy exchange between incident and diffracted beams.]]></summary></entry><entry><title type="html">LOQC State Generation</title><link href="https://chunde.github.io/blog/2025/LOQC-State-Generation/" rel="alternate" type="text/html" title="LOQC State Generation"/><published>2025-07-17T00:42:13+00:00</published><updated>2025-07-17T00:42:13+00:00</updated><id>https://chunde.github.io/blog/2025/LOQC-State-Generation</id><content type="html" xml:base="https://chunde.github.io/blog/2025/LOQC-State-Generation/"><![CDATA[<h3 id="step-by-step-loqc-state-generation">Step-by-Step LOQC State Generation</h3> <ol> <li> <p><strong>Photon Source Preparation</strong><br/> Begin with spontaneous parametric down-conversion (SPDC) to generate entangled photon pairs:<br/> \(|\psi\rangle = \frac{1}{\sqrt{2}}(|H\rangle_1|H\rangle_2 + |V\rangle_1|V\rangle_2)\)</p> </li> <li> <p><strong>Polarization Encoding</strong><br/> Use wave plates to encode qubits in photon polarization states:<br/> \(|0\rangle \equiv |H\rangle, \quad |1\rangle \equiv |V\rangle\)</p> </li> <li> <p><strong>Beam Splitter Operation</strong><br/> Apply a 50:50 beam splitter transformation:<br/> \(\hat{a}^\dagger \rightarrow \frac{1}{\sqrt{2}}(\hat{b}^\dagger + \hat{c}^\dagger)\)<br/> \(\hat{d}^\dagger \rightarrow \frac{1}{\sqrt{2}}(\hat{b}^\dagger - \hat{c}^\dagger)\)</p> </li> <li> <p><strong>Post-Selection</strong><br/> Detect photons in specific output modes to herald successful state creation (e.g., Bell state generation requires coincidence detection)</p> </li> <li> <p><strong>Feed-Forward Correction</strong><br/> Apply conditional phase shifts based on measurement outcomes:<br/> \(U_{ff} = e^{i\pi|1\rangle\langle 1|}\)</p> </li> <li> <p><strong>Verification</strong><br/> Perform quantum state tomography to confirm the generated state‚Äôs fidelity</p> </li> </ol> <p>Key optical components required:</p> <ul> <li>Nonlinear crystals (BBO/PPKTP)</li> <li>Polarizing beam splitters</li> <li>Half-wave and quarter-wave plates</li> <li>Single-photon detectors</li> </ul> <p>The entire process can be represented as a quantum circuit:<br/> \(\text{SPDC} \rightarrow \text{BS} \rightarrow \text{PS} \rightarrow \text{PBS} \rightarrow \text{Det.}\)</p> <p>Where BS = Beam Splitter, PS = Phase Shifter, PBS = Polarizing Beam Splitter, Det. = Detection. The exact sequence depends on the target state (e.g., GHZ, cluster, or graph states).</p>]]></content><author><name></name></author><category term="Quantum-Computing"/><category term="LOQC"/><category term="Photonics"/><category term="Quantum-Optics"/><summary type="html"><![CDATA[Step-by-step demonstration of generating quantum states using linear optical quantum computing methods]]></summary></entry><entry><title type="html">Church-Turing Thesis Simplified</title><link href="https://chunde.github.io/blog/2025/Church-Turing-Thesis-Explained-with-Examples/" rel="alternate" type="text/html" title="Church-Turing Thesis Simplified"/><published>2025-07-13T18:50:29+00:00</published><updated>2025-07-13T18:50:29+00:00</updated><id>https://chunde.github.io/blog/2025/Church-Turing-Thesis-Explained-with-Examples</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Church-Turing-Thesis-Explained-with-Examples/"><![CDATA[<h3 id="what-is-the-church-turing-thesis">What is the Church-Turing Thesis?</h3> <p>In simple terms, the <strong>Church-Turing Thesis</strong> claims:<br/> <em>‚ÄúAnything that can be computed by a mechanical process can be computed by a Turing Machine (or equivalently, by lambda calculus).‚Äù</em></p> <p>This means all forms of computation ‚Äì whether done by humans, aliens, or future quantum computers ‚Äì are fundamentally equivalent in power to a simple theoretical machine (the Turing Machine).</p> <hr/> <h3 id="3-dummy-friendly-examples">3 Dummy-Friendly Examples</h3> <h4 id="1-baking-a-cake-human-computation">1. <strong>Baking a Cake (Human Computation)</strong></h4> <ul> <li><strong>Task</strong>: Follow a recipe step-by-step.</li> <li><strong>Thesis Connection</strong>: The recipe is like an ‚Äúalgorithm,‚Äù and your brain is the ‚Äúcomputer.‚Äù The Church-Turing Thesis says this process could be replicated by a Turing Machine (albeit very slowly!).</li> </ul> <h4 id="2-traffic-lights-physical-system">2. <strong>Traffic Lights (Physical System)</strong></h4> <ul> <li><strong>Task</strong>: A traffic light cycles through red ‚Üí green ‚Üí yellow.</li> <li><strong>Thesis Connection</strong>: This is a finite-state machine, a simpler version of a Turing Machine. The thesis implies even complex traffic systems could be modeled computationally.</li> </ul> <h4 id="3-chatgpt-modern-ai">3. <strong>ChatGPT (Modern AI)</strong></h4> <ul> <li><strong>Task</strong>: Generate human-like text.</li> <li><strong>Thesis Connection</strong>: Despite its complexity, ChatGPT‚Äôs underlying computation is reducible to operations a Turing Machine could perform (given enough time and memory).</li> </ul> <hr/> <h3 id="key-takeaways">Key Takeaways</h3> <ul> <li>The thesis is a <strong>hypothesis</strong>, not a proven law, but no counterexamples exist.</li> <li>It sets the boundary for what we consider ‚Äúcomputable.‚Äù</li> <li>Example math formulation: A Turing Machine can compute any function \(f(x)\) where \(x\) is input, if \(f\) is algorithmically solvable.</li> </ul> <p><em>Bonus</em>: Even your smartphone‚Äôs apps ultimately rely on this idea ‚Äì all computations boil down to operations a Turing Machine could do!</p>]]></content><author><name></name></author><category term="computation"/><category term="theory"/><category term="computer-science"/><category term="philosophy"/><summary type="html"><![CDATA[Intuitive explanation of the Church-Turing thesis with everyday examples.]]></summary></entry></feed>