<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://chunde.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://chunde.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-21T07:30:54+00:00</updated><id>https://chunde.github.io/feed.xml</id><title type="html">i‚Ñè‚àÆdÕ©ùõë‚Ä¢üíï</title><subtitle>Chunde&apos;s Personal Pages. </subtitle><entry><title type="html">FastAPI</title><link href="https://chunde.github.io/blog/2025/FastAPI-Overview/" rel="alternate" type="text/html" title="FastAPI"/><published>2025-09-20T23:30:07+00:00</published><updated>2025-09-20T23:30:07+00:00</updated><id>https://chunde.github.io/blog/2025/FastAPI-Overview</id><content type="html" xml:base="https://chunde.github.io/blog/2025/FastAPI-Overview/"><![CDATA[<p>FastAPI is a modern, high-performance web framework for building APIs with Python 3.7+ that is based on standard Python type hints. It is designed to be fast to code, with high performance, and to provide automatic interactive API documentation.</p> <p>Key features of FastAPI include:</p> <ul> <li><strong>High performance</strong>: Built on Starlette for the web parts and Pydantic for the data parts, it is one of the fastest Python frameworks available, comparable to Node.js and Go.</li> <li><strong>Automatic documentation</strong>: Generates interactive API documentation (using Swagger UI and ReDoc) automatically from your code, making it easy to test and understand endpoints.</li> <li><strong>Type safety</strong>: Leverages Python type hints to validate data, serialize and deserialize inputs and outputs, reducing bugs and improving developer productivity.</li> <li><strong>Asynchronous support</strong>: Native support for async and await, making it efficient for handling high levels of concurrency with ASGI.</li> <li><strong>Dependency injection</strong>: Built-in support for dependency injection, simplifying code organization and reuse.</li> </ul> <p>Example of a simple FastAPI endpoint:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">fastapi</span> <span class="kn">import</span> <span class="n">FastAPI</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">FastAPI</span><span class="p">()</span>

<span class="nd">@app.get</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">read_root</span><span class="p">():</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">Hello</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">World</span><span class="sh">"</span><span class="p">}</span>
</code></pre></div></div> <p>This code creates a basic API that returns a JSON response. FastAPI automatically generates docs at <code class="language-plaintext highlighter-rouge">/docs</code> and <code class="language-plaintext highlighter-rouge">/redoc</code>.</p> <p>Overall, FastAPI is ideal for developing RESTful APIs, microservices, and other web services where speed, ease of use, and robustness are priorities.</p>]]></content><author><name></name></author><category term="Python"/><category term="Web-Development"/><category term="API"/><category term="FastAPI"/><summary type="html"><![CDATA[A modern, high-performance web framework for building APIs with Python.]]></summary></entry><entry><title type="html">Scaffolding in Protein Design</title><link href="https://chunde.github.io/blog/2025/Scaffolding-in-Protein-Design/" rel="alternate" type="text/html" title="Scaffolding in Protein Design"/><published>2025-09-20T11:33:59+00:00</published><updated>2025-09-20T11:33:59+00:00</updated><id>https://chunde.github.io/blog/2025/Scaffolding-in-Protein-Design</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Scaffolding-in-Protein-Design/"><![CDATA[<p>In protein design, scaffolding refers to the use of a stable, well-characterized protein framework to support and stabilize functional motifs or domains that may be unstable or non-functional on their own. This approach is essential for creating chimeric or engineered proteins with desired activities, such as enzymes with novel catalytic functions, binding proteins, or biosensors.</p> <h3 id="how-scaffolding-works">How Scaffolding Works:</h3> <ol> <li><strong>Selection of Scaffold</strong>: A robust, structurally stable protein (e.g., a small globular protein like GFP, fibronectin domains, or helical bundles) is chosen as the scaffold. It should have minimal functional interference and high expression compatibility.</li> <li><strong>Integration of Functional Motifs</strong>: Functional elements (e.g., active sites, binding loops, or epitopes) are grafted onto the scaffold, often by replacing or inserting sequences into flexible regions (like loops) or surface-exposed areas. This is done while preserving the scaffold‚Äôs overall fold and stability.</li> <li><strong>Stabilization and Optimization</strong>: The scaffold provides a rigid backbone that reduces conformational entropy, enhancing the stability and proper folding of the functional motif. Computational tools (e.g., Rosetta) or directed evolution may be used to optimize interactions and minimize destabilization.</li> <li><strong>Validation</strong>: The designed protein is tested experimentally for stability, function, and structure (e.g., via X-ray crystallography or NMR) to ensure the scaffold supports the intended activity.</li> </ol> <h3 id="key-principles">Key Principles:</h3> <ul> <li><strong>Spatial Positioning</strong>: The scaffold orients functional groups in specific geometries, crucial for activities like catalysis or molecular recognition.</li> <li><strong>Minimized Interference</strong>: Scaffolds are often ‚Äúdefunctionalized‚Äù to avoid unwanted interactions.</li> <li><strong>Modularity</strong>: Scaffolds allow modular design, where multiple motifs can be incorporated into one framework.</li> </ul> <h3 id="applications">Applications:</h3> <p>Scaffolding is used in designing enzymes, antibodies, synthetic receptors, and protein-based materials. For example, in enzyme engineering, a scaffold can stabilize a nascent active site, while in biosensors, it can position binding domains for optimal signal transduction.</p> <h3 id="mathematical-representation">Mathematical Representation:</h3> <p>The stability of a scaffolded protein can be modeled using energy functions, where the total free energy \(\Delta G_{\text{total}}\) is a sum of contributions from the scaffold (\(\Delta G_{\text{scaffold}}\)) and the grafted motif (\(\Delta G_{\text{motif}}\)), adjusted for interactions (\(\Delta G_{\text{interaction}}\)):<br/> \(\Delta G_{\text{total}} = \Delta G_{\text{scaffold}} + \Delta G_{\text{motif}} + \Delta G_{\text{interaction}}\)<br/> A negative \(\Delta G_{\text{total}}\) indicates a stable design.</p> <p>By leveraging scaffolding, protein designers can create functional proteins that might otherwise be inaccessible due to instability or misfolding.</p>]]></content><author><name></name></author><category term="protein-design"/><category term="scaffolding"/><category term="structural-biology"/><category term="bioengineering"/><summary type="html"><![CDATA[Scaffolding provides structural support to stabilize functional protein motifs in engineered proteins.]]></summary></entry><entry><title type="html">Cavitron Ultrasonic Surgical Aspirator</title><link href="https://chunde.github.io/blog/2025/Cavitron-Ultrasonic-Surgical-Aspirator/" rel="alternate" type="text/html" title="Cavitron Ultrasonic Surgical Aspirator"/><published>2025-09-05T22:23:46+00:00</published><updated>2025-09-05T22:23:46+00:00</updated><id>https://chunde.github.io/blog/2025/Cavitron-Ultrasonic-Surgical-Aspirator</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Cavitron-Ultrasonic-Surgical-Aspirator/"><![CDATA[<p>The Cavitron Ultrasonic Surgical Aspirator (CUSA) is a sophisticated medical device used in surgery to selectively fragment and remove tissues with high precision, while minimizing damage to surrounding structures. It employs ultrasonic vibrations‚Äîtypically at frequencies around \(23 \text{kHz}\) to \(36 \text{kHz}\)‚Äîgenerated by a piezoelectric or magnetostrictive transducer. These vibrations are transmitted to a titanium tip, which oscillates longitudinally at amplitudes on the order of micrometers.</p> <p>When the tip contacts tissue, the ultrasonic energy causes cavitation and mechanical disruption, effectively emulsifying or fragmenting the target material (e.g., soft tumors, necrotic tissue, or parenchyma). Simultaneously, an integrated irrigation and aspiration system flushes the area with saline and suctions away the debris, keeping the surgical field clear. The device allows surgeons to control parameters such as amplitude (power), aspiration strength, and irrigation rate, tailoring the effect to tissue consistency‚Äîsofter tissues are more readily fragmented than firmer, collagen-rich ones.</p> <p>CUSA is particularly valued in neurosurgery for resecting brain tumors (e.g., gliomas or meningiomas) where precision is critical to spare healthy neural tissue, and in hepatic, pancreatic, or other oncologic surgeries for debulking masses. Advantages include reduced bleeding, enhanced visualization, and selective tissue removal, though it requires skill to avoid inadvertent injury. It represents a key tool in minimally invasive and delicate surgical procedures.</p>]]></content><author><name></name></author><category term="surgery"/><category term="ultrasonic"/><category term="CUSA"/><category term="medical-device"/><category term="neurosurgery"/><category term="oncology"/><summary type="html"><![CDATA[A surgical device using ultrasonic vibrations to fragment and aspirate tissue with precision.]]></summary></entry><entry><title type="html">Sodium Fluorescein Guided Microscopy</title><link href="https://chunde.github.io/blog/2025/Sodium-Fluorescein-Guided-Microscopy/" rel="alternate" type="text/html" title="Sodium Fluorescein Guided Microscopy"/><published>2025-09-05T22:23:46+00:00</published><updated>2025-09-05T22:23:46+00:00</updated><id>https://chunde.github.io/blog/2025/Sodium-Fluorescein-Guided-Microscopy</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Sodium-Fluorescein-Guided-Microscopy/"><![CDATA[<p>Sodium fluorescein guided microscopy is a biomedical imaging technique that utilizes the fluorescent dye sodium fluorescein to improve the visualization of biological tissues, cellular structures, or pathological features under a microscope. Sodium fluorescein (chemical formula \(C_{20}H_{10}Na_2O_5\)) is a water-soluble, yellow-green fluorescent compound that emits light at approximately 521 nm when excited by blue light (around 494 nm). This property makes it highly effective for highlighting specific areas of interest in various applications, such as ophthalmology, dermatology, and surgical procedures.</p> <p>The process typically involves applying sodium fluorescein topically, intravenously, or via other routes, depending on the target tissue. Under a fluorescence microscope equipped with appropriate filters (e.g., a blue excitation filter and a barrier filter to block unwanted wavelengths), the dye-bound regions emit bright green fluorescence, contrasting sharply with the background. This enhances the detection of abnormalities like corneal abrasions, vascular leaks, or tumor margins.</p> <p>Advantages include high sensitivity, real-time imaging, and relatively low toxicity, though precautions are necessary to avoid adverse reactions. It is widely used in procedures such as fluorescein angiography for retinal imaging and in guided biopsies for cancer diagnosis.</p>]]></content><author><name></name></author><category term="microscopy"/><category term="fluorescence"/><category term="sodium-fluorescein"/><category term="biomedical-imaging"/><category term="diagnostics"/><summary type="html"><![CDATA[A technique using sodium fluorescein dye to enhance visualization under microscopy.]]></summary></entry><entry><title type="html">Saltatory Conduction</title><link href="https://chunde.github.io/blog/2025/Saltatory-Conduction-in-Myelin/" rel="alternate" type="text/html" title="Saltatory Conduction"/><published>2025-09-01T22:52:38+00:00</published><updated>2025-09-01T22:52:38+00:00</updated><id>https://chunde.github.io/blog/2025/Saltatory-Conduction-in-Myelin</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Saltatory-Conduction-in-Myelin/"><![CDATA[<p>Saltatory conduction is a mechanism of nerve impulse propagation in myelinated axons, where the action potential ‚Äújumps‚Äù from one node of Ranvier to the next, rather than traveling continuously along the axon. This process significantly increases the speed and efficiency of neural transmission.</p> <h3 id="key-components">Key Components:</h3> <ul> <li><strong>Myelin Sheath</strong>: A fatty, insulating layer produced by Schwann cells in the peripheral nervous system and oligodendrocytes in the central nervous system. It wraps around the axon, leaving small gaps called nodes of Ranvier.</li> <li><strong>Nodes of Ranvier</strong>: Unmyelinated gaps rich in voltage-gated ion channels (e.g., sodium and potassium channels), essential for regenerating the action potential.</li> </ul> <h3 id="mechanism">Mechanism:</h3> <ol> <li><strong>Ion Flow Restriction</strong>: Myelin prevents ion leakage across the axon membrane, reducing capacitive current and allowing the depolarizing signal to spread farther with less attenuation.</li> <li><strong>Signal ‚ÄúJumping‚Äù</strong>: The action potential depolarizes one node of Ranvier, triggering voltage-gated sodium channels to open and influx Na‚Å∫ ions. This depolarization passively spreads through the myelinated internode to the next node, where it reaches threshold and regenerates the action potential. Thus, the impulse appears to ‚Äújump‚Äù between nodes.</li> <li><strong>Energy Efficiency</strong>: Since ion exchange only occurs at the nodes, less ATP is required to restore ionic gradients via the sodium-potassium pump (Na‚Å∫/K‚Å∫-ATPase) compared to unmyelinated axons.</li> </ol> <h3 id="advantages">Advantages:</h3> <ul> <li><strong>Increased Conduction Velocity</strong>: Saltatory conduction can achieve speeds up to 100 m/s, whereas unmyelinated axons typically conduct at 0.5‚Äì2 m/s.</li> <li><strong>Reduced Metabolic Cost</strong>: Limited ion channel activity conserves energy.</li> </ul> <p>Mathematically, the conduction velocity \(v\) in myelinated axons can be approximated by \(v \propto \frac{d}{\tau}\), where \(d\) is the axon diameter and \(\tau\) is the time constant, but saltation optimizes this further by leveraging internodal distance and myelin thickness.</p> <p>This process is critical for rapid response in neural systems, such as reflex arcs and motor coordination.</p>]]></content><author><name></name></author><category term="neuroscience"/><category term="myelin"/><category term="axon"/><category term="conduction"/><summary type="html"><![CDATA[The process by which nerve impulses jump between nodes of Ranvier in myelinated axons.]]></summary></entry><entry><title type="html">Comprehensive Human Proteome Aging Study</title><link href="https://chunde.github.io/blog/2025/Aging-Proteomics-Study/" rel="alternate" type="text/html" title="Comprehensive Human Proteome Aging Study"/><published>2025-08-31T23:08:56+00:00</published><updated>2025-08-31T23:08:56+00:00</updated><id>https://chunde.github.io/blog/2025/Aging-Proteomics-Study</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Aging-Proteomics-Study/"><![CDATA[<h2 id="study-overview">Study Overview</h2> <p>The paper ‚ÄúComprehensive human proteome profiles across a 50-year lifespan reveal aging trajectories and signatures‚Äù by Ding et al. (Cell, 2025) represents a landmark study in aging research that provides the most comprehensive proteomic analysis of human aging to date.</p> <h2 id="key-findings">Key Findings</h2> <h3 id="study-design-and-scale"><strong>Study Design and Scale</strong></h3> <ul> <li>Analyzed <strong>516 samples</strong> from <strong>13 different human tissues</strong> spanning <strong>five decades</strong> of human lifespan</li> <li>Combined proteomic analysis with histological examination</li> <li>Created the first dynamic proteomic atlas of human aging</li> </ul> <h3 id="major-discoveries"><strong>Major Discoveries</strong></h3> <ol> <li> <p><strong>Transcriptome-Proteome Decoupling</strong>: The study revealed widespread dissociation between mRNA levels and protein expression, indicating that post-transcriptional regulation plays a crucial role in aging.</p> </li> <li> <p><strong>Proteostasis Decline</strong>: Found evidence of declining protein homeostasis characterized by <strong>amyloid accumulation</strong> across multiple tissues.</p> </li> <li> <p><strong>Aging Inflection Point</strong>: Temporal analysis identified a significant <strong>aging inflection around age 50</strong>, suggesting this as a critical transition period in human aging.</p> </li> <li> <p><strong>Tissue-Specific Aging Patterns</strong>: Developed <strong>tissue-specific proteomic age clocks</strong> that characterize organ-level aging trajectories.</p> </li> <li> <p><strong>Vascular System Vulnerability</strong>: Blood vessels were identified as a tissue that <strong>ages early</strong> and is <strong>markedly susceptible</strong> to aging processes.</p> </li> </ol> <h3 id="clinical-and-diagnostic-applications"><strong>Clinical and Diagnostic Applications</strong></h3> <p>The researchers defined a <strong>plasma proteomic signature of aging</strong> that matches tissue origins, providing potential biomarkers for:</p> <ul> <li>Non-invasive aging assessment</li> <li>Early detection of age-related diseases</li> <li>Monitoring therapeutic interventions</li> </ul> <h3 id="mechanistic-insights"><strong>Mechanistic Insights</strong></h3> <p>Identified candidate <strong>senoproteins</strong> (senescence-associated proteins), including <strong>GAS6</strong>, that appear to drive both vascular and systemic aging processes.</p> <h2 id="significance-and-implications">Significance and Implications</h2> <p>This study provides a <strong>systems-level understanding</strong> of human aging through the proteomic lens, offering:</p> <ol> <li><strong>Novel Biomarkers</strong>: The plasma proteomic signature enables non-invasive aging assessment</li> <li><strong>Therapeutic Targets</strong>: Identified senoproteins like GAS6 represent potential intervention targets</li> <li><strong>Diagnostic Tools</strong>: Tissue-specific proteomic clocks allow organ-level aging assessment</li> <li><strong>Mechanistic Understanding</strong>: Reveals the critical role of proteostasis in aging processes</li> </ol> <h2 id="technical-methodology">Technical Methodology</h2> <p>The study employed advanced mass spectrometry-based proteomics combined with histological validation across multiple tissue types, providing unprecedented resolution in understanding protein-level changes during aging.</p> <h2 id="future-directions">Future Directions</h2> <p>This comprehensive proteomic atlas lays the groundwork for:</p> <ul> <li>Developing targeted anti-aging interventions</li> <li>Creating personalized aging assessment tools</li> <li>Understanding tissue-specific vulnerability to age-related diseases</li> <li>Exploring the role of specific senoproteins in aging pathology</li> </ul> <p>The study represents a significant advancement in our understanding of human aging at the molecular level and provides valuable resources for both basic research and clinical applications in aging biology.</p>]]></content><author><name></name></author><category term="proteomics"/><category term="aging"/><category term="biomarkers"/><category term="senescence"/><category term="vascular-aging"/><category term="amyloid"/><summary type="html"><![CDATA[Landmark study analyzing proteomic changes across 13 human tissues over 50 years reveals aging trajectories and biomarkers]]></summary></entry><entry><title type="html">MCP and Tool Usage in AI</title><link href="https://chunde.github.io/blog/2025/MCP-(Model-Context-Protocol)-and-Tool-Usage-in-AI/" rel="alternate" type="text/html" title="MCP and Tool Usage in AI"/><published>2025-08-18T22:18:08+00:00</published><updated>2025-08-18T22:18:08+00:00</updated><id>https://chunde.github.io/blog/2025/MCP-(Model-Context-Protocol)-and-Tool-Usage-in-AI</id><content type="html" xml:base="https://chunde.github.io/blog/2025/MCP-(Model-Context-Protocol)-and-Tool-Usage-in-AI/"><![CDATA[<h3 id="how-mcp-works">How MCP Works</h3> <p>MCP (Model Context Protocol) is a framework that allows AI models to dynamically interact with external tools by:</p> <ol> <li><strong>Tool Registry</strong>: Maintains a catalog of available tools with metadata (e.g., purpose, input/output schemas).</li> <li><strong>Context Analysis</strong>: The model evaluates the user query and current context to determine if a tool is needed. For example: <ul> <li><em>Query</em>: ‚ÄúWhat‚Äôs the weather in Tokyo tomorrow?‚Äù ‚Üí Triggers a weather API tool.</li> <li><em>Query</em>: ‚ÄúSolve \(x^2 + 3x - 4 = 0\)‚Äù ‚Üí Triggers a symbolic math solver.</li> </ul> </li> <li><strong>Tool Selection</strong>: Uses embeddings or heuristic rules to match the query intent with the best tool. DeepSeek might rank tools by:<br/> \(\text{Score}(t) = \alpha \cdot \text{Relevance}(t, q) + \beta \cdot \text{Confidence}(t)\)<br/> where \(t\) = tool, \(q\) = query, and \(\alpha, \beta\) are weights.</li> <li><strong>Execution</strong>: The model formats the input for the tool, executes it, and integrates the response into its output.</li> </ol> <h3 id="does-fine-tuning-help">Does Fine-Tuning Help?</h3> <ul> <li><strong>Pre-trained models</strong> (e.g., DeepSeek) can use tools <em>without fine-tuning</em> if they‚Äôre trained on tool-calling demonstrations.</li> <li><strong>Fine-tuning</strong> improves accuracy by: <ul> <li>Adapting to proprietary tools (e.g., internal databases).</li> <li>Reducing hallucination in tool selection.</li> <li>Optimizing input/output parsing (e.g., handling API errors).</li> </ul> </li> </ul> <h3 id="deepseek-example">DeepSeek Example</h3> <p>When you ask DeepSeek to ‚ÄúBook a flight to Paris,‚Äù it:</p> <ol> <li>Detects intent (travel booking).</li> <li>Selects a flight-booking tool (if available in its registry).</li> <li>Generates structured parameters (dates, budget) for the API.</li> <li>Returns the API‚Äôs response in natural language.</li> </ol> <p>Key challenges include handling tool failures and maintaining user context across multi-step workflows.</p>]]></content><author><name></name></author><category term="Artificial-Intelligence"/><category term="AI"/><category term="MCP"/><category term="Tool-Usage"/><category term="DeepSeek"/><category term="Fine-Tuning"/><summary type="html"><![CDATA[Explanation of how MCP enables AI models to select and use external tools.]]></summary></entry><entry><title type="html">CRISPR Epigenome Editing</title><link href="https://chunde.github.io/blog/2025/CRISPR-based-Epigenome-Engineering/" rel="alternate" type="text/html" title="CRISPR Epigenome Editing"/><published>2025-08-17T10:16:18+00:00</published><updated>2025-08-17T10:16:18+00:00</updated><id>https://chunde.github.io/blog/2025/CRISPR-based-Epigenome-Engineering</id><content type="html" xml:base="https://chunde.github.io/blog/2025/CRISPR-based-Epigenome-Engineering/"><![CDATA[<h3 id="how-crispr-based-epigenome-engineering-works"><strong>How CRISPR-Based Epigenome Engineering Works</strong></h3> <p>CRISPR-based epigenome engineering leverages the precision of the CRISPR-Cas system to modify gene expression <em>without altering the underlying DNA sequence</em>. Instead of inducing double-strand breaks (DSBs), it targets epigenetic marks‚Äîchemical modifications on DNA or histones that regulate gene activity.</p> <h4 id="key-components--mechanism"><strong>Key Components &amp; Mechanism</strong></h4> <ol> <li><strong>CRISPR-Cas9 Variants (dCas9 or nCas9)</strong> <ul> <li><strong>dCas9 (dead Cas9)</strong>: Catalytically inactive (no DNA cleavage) but retains DNA-binding ability.</li> <li><strong>nCas9 (nickase)</strong>: Cuts only one DNA strand, reducing off-target effects.</li> </ul> </li> <li><strong>Epigenetic Effector Domains</strong><br/> Fused to dCas9 to add/remove epigenetic marks: <ul> <li><strong>DNA Methylation</strong>: <em>DNMT3A</em> (methyltransferase) silences genes by adding methyl groups to CpG islands.</li> <li><strong>DNA Demethylation</strong>: <em>TET1</em> oxidizes 5-methylcytosine to promote gene activation.</li> <li><strong>Histone Modifiers</strong>: <ul> <li><em>p300</em> (acetyltransferase) activates genes via histone acetylation (e.g., H3K27ac).</li> <li><em>LSD1</em> (demethylase) represses genes by removing H3K4me2/me3 marks.</li> </ul> </li> </ul> </li> <li><strong>sgRNA Design</strong><br/> Guides dCas9-effector fusion to specific genomic loci (e.g., promoters/enhancers).</li> </ol> <h4 id="workflow"><strong>Workflow</strong></h4> <ol> <li><strong>Target Selection</strong>: sgRNA directs dCas9-effector to the desired region.</li> <li><strong>Epigenetic Editing</strong>: <ul> <li>For activation: \(\text{dCas9-p300} \rightarrow \text{H3K27ac} \uparrow \rightarrow \text{Transcription} \uparrow\)</li> <li>For repression: \(\text{dCas9-KRAB} \rightarrow \text{H3K9me3} \uparrow \rightarrow \text{Transcription} \downarrow\)</li> </ul> </li> <li><strong>Outcome</strong>: Stable or transient changes in gene expression.</li> </ol> <h4 id="applications"><strong>Applications</strong></h4> <ul> <li><strong>Disease Modeling</strong>: Study roles of epigenetic marks in cancer/neurodegeneration.</li> <li><strong>Therapeutics</strong>: Reactivate tumor suppressor genes or silence oncogenes.</li> <li><strong>Agriculture</strong>: Modulate stress-responsive genes in crops.</li> </ul> <h4 id="advantages-over-traditional-crispr"><strong>Advantages Over Traditional CRISPR</strong></h4> <ul> <li>Reversible edits (no permanent DNA damage).</li> <li>Multiplexing (target multiple loci simultaneously).</li> <li>Reduced off-target effects (no DSBs).</li> </ul> <h4 id="challenges"><strong>Challenges</strong></h4> <ul> <li>Delivery efficiency (viral/non-viral vectors).</li> <li>Durability of epigenetic changes.</li> <li>Ethical concerns (e.g., germline editing).</li> </ul> <p>This approach expands CRISPR‚Äôs utility beyond knockout/knock-in, enabling precise control over gene networks.</p> <hr/> <p><em>Example</em>: Using \(\text{dCas9-TET1}\) to demethylate the <em>FMR1</em> promoter in Fragile X syndrome models.</p>]]></content><author><name></name></author><category term="CRISPR"/><category term="epigenetics"/><category term="gene-regulation"/><category term="genome-editing"/><category term="biotechnology"/><summary type="html"><![CDATA[Mechanism and applications of CRISPR for targeted epigenetic modifications.]]></summary></entry><entry><title type="html">Mitochondrial Transplantation</title><link href="https://chunde.github.io/blog/2025/Mitochondrial-Transplantation-Mechanism/" rel="alternate" type="text/html" title="Mitochondrial Transplantation"/><published>2025-08-15T23:47:23+00:00</published><updated>2025-08-15T23:47:23+00:00</updated><id>https://chunde.github.io/blog/2025/Mitochondrial-Transplantation-Mechanism</id><content type="html" xml:base="https://chunde.github.io/blog/2025/Mitochondrial-Transplantation-Mechanism/"><![CDATA[<h3 id="detailed-explanation-of-mitochondrial-transplantation"><strong>Detailed Explanation of Mitochondrial Transplantation</strong></h3> <p>Mitochondrial transplantation is an emerging therapeutic technique where functional mitochondria are transferred from healthy donor cells to recipient cells with dysfunctional mitochondria. This process aims to restore cellular bioenergetics and mitigate diseases caused by mitochondrial dysfunction (e.g., neurodegenerative disorders, heart disease).</p> <h4 id="key-steps"><strong>Key Steps</strong>:</h4> <ol> <li><strong>Isolation of Mitochondria</strong>: <ul> <li>Healthy mitochondria are extracted from donor cells (e.g., mesenchymal stem cells) via differential centrifugation or microfluidics.</li> <li>Purity is confirmed using markers like <strong>MT-CO1</strong> (mitochondrial cytochrome oxidase).</li> </ul> </li> <li><strong>Delivery Methods</strong>: <ul> <li><strong>Direct Injection</strong>: Mitochondria are injected into target tissues (e.g., myocardium in heart disease).</li> <li><strong>Co-incubation</strong>: Recipient cells are incubated with isolated mitochondria, which are internalized via endocytosis or membrane fusion.</li> <li><strong>Nanocarriers</strong>: Mitochondria are encapsulated in lipid nanoparticles for targeted delivery.</li> </ul> </li> <li><strong>Integration</strong>: <ul> <li>Transplanted mitochondria merge with the host cell‚Äôs mitochondrial network (<strong>fusion</strong>) or operate independently.</li> <li>Energy production (ATP synthesis) is restored via oxidative phosphorylation (\(\Delta \psi_m\) = membrane potential).</li> </ul> </li> <li><strong>Therapeutic Effects</strong>: <ul> <li><strong>Cardioprotection</strong>: Improves ATP supply in ischemic hearts.</li> <li><strong>Neuroprotection</strong>: Reduces oxidative stress in neurons.</li> </ul> </li> </ol> <h4 id="challenges"><strong>Challenges</strong>:</h4> <ul> <li><strong>Immune rejection</strong>: Donor mitochondria may trigger immune responses.</li> <li><strong>Quality control</strong>: Ensuring mitochondrial viability pre-transplantation.</li> </ul> <h4 id="applications"><strong>Applications</strong>:</h4> <ul> <li>Treating <strong>mitochondrial DNA disorders</strong> (e.g., Leigh syndrome).</li> <li>Enhancing <strong>organ transplant outcomes</strong>.</li> </ul> <p><strong>Formula Example</strong>: The ATP yield from transplanted mitochondria can be modeled as:<br/> \(\text{ATP} = n \times \text{PDH activity} \times \Delta \psi_m\)<br/> where \(n\) = number of functional mitochondria.</p> <p>This technique holds promise but requires further clinical validation.</p>]]></content><author><name></name></author><category term="cell-therapy"/><category term="mitochondria"/><category term="regenerative-medicine"/><category term="bioengineering"/><summary type="html"><![CDATA[Process of transferring healthy mitochondria to repair damaged cells.]]></summary></entry><entry><title type="html">x86 Assembly Interrupt Vector Check</title><link href="https://chunde.github.io/blog/2025/x86-Assembly-Code-Analysis-for-Interrupt-Vector-Tampering-Detection/" rel="alternate" type="text/html" title="x86 Assembly Interrupt Vector Check"/><published>2025-08-06T20:30:44+00:00</published><updated>2025-08-06T20:30:44+00:00</updated><id>https://chunde.github.io/blog/2025/x86-Assembly-Code-Analysis-for-Interrupt-Vector-Tampering-Detection</id><content type="html" xml:base="https://chunde.github.io/blog/2025/x86-Assembly-Code-Analysis-for-Interrupt-Vector-Tampering-Detection/"><![CDATA[<p>This x86 assembly code snippet checks for potential tampering with interrupt vectors (specifically INT 1 and INT 3), which is a common technique used by debuggers like SoftICE. Here‚Äôs the detailed breakdown:</p> <ol> <li><strong>Loading IDT Address</strong>: <pre><code class="language-assembly">mov eax, dword ptr [pIDT+2]  ; Load upper part of IDT base address
</code></pre> <ul> <li><code class="language-plaintext highlighter-rouge">pIDT</code> likely points to a structure containing the IDT (Interrupt Descriptor Table) address</li> <li><code class="language-plaintext highlighter-rouge">+2</code> offset suggests retrieving the high-order 32 bits of a 48-bit IDT base address</li> </ul> </li> <li><strong>Calculate INT 1 Vector Address</strong>: <pre><code class="language-assembly">add eax, 8                  ; Each interrupt descriptor is 8 bytes
</code></pre> <ul> <li>INT 1 (debug exception) is the second entry (after INT 0)</li> <li>Adding 8 bytes (1 entry) to reach INT 1‚Äôs descriptor</li> </ul> </li> <li><strong>Store INT 1 Handler</strong>: <pre><code class="language-assembly">mov ebx, [eax]              ; Get first 4 bytes of INT 1 descriptor
</code></pre> <ul> <li>Stores the low 32 bits of INT 1‚Äôs handler address (offset + selector)</li> </ul> </li> <li><strong>Calculate INT 3 Vector Address</strong>: <pre><code class="language-assembly">add eax, 16                 ; Skip INT 2 to reach INT 3 (8*2=16 bytes)
</code></pre> <ul> <li>INT 3 (breakpoint) is the fourth entry</li> <li>Adding 16 more bytes (2 entries) to reach INT 3‚Äôs descriptor</li> </ul> </li> <li><strong>Store INT 3 Handler</strong>: <pre><code class="language-assembly">mov eax, [eax]              ; Get first 4 bytes of INT 3 descriptor
</code></pre> </li> <li><strong>Extract Offsets</strong>: <pre><code class="language-assembly">and eax, 0FFFFh             ; Mask to get handler offset (low 16 bits)
and ebx, 0FFFFh             ; Same for INT 1
</code></pre> <ul> <li>Isolates the offset parts of both interrupt handlers</li> </ul> </li> <li><strong>Calculate Distance</strong>: <pre><code class="language-assembly">sub eax, ebx                ; Find displacement between handlers
cmp eax, 10h                ; Compare with expected value (16 bytes)
jne HackedVector            ; Jump if not equal
</code></pre> <ul> <li>Checks if the distance between INT 1 and INT 3 handlers is exactly 16 bytes</li> <li>If not, assumes tampering (e.g., by SoftICE debugger)</li> </ul> </li> </ol> <p><strong>Key Points</strong>:</p> <ul> <li>The code assumes legitimate interrupt handlers will have a specific memory layout</li> <li>Debuggers often modify these vectors to insert their own handlers</li> <li>The check \(\text{INT3\_offset} - \text{INT1\_offset} = 16\) is used as a fingerprint</li> <li>This is anti-debugging technique commonly seen in copy protection schemes</li> </ul>]]></content><author><name></name></author><category term="assembly"/><category term="x86"/><category term="reverse-engineering"/><category term="interrupts"/><summary type="html"><![CDATA[Analysis of assembly code detecting interrupt vector tampering]]></summary></entry></feed>